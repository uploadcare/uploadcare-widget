// utils
import {
  FileReader,
  URL,
  Blob,
  iOSVersion,
  fileDragAndDrop,
  canvas,
  dragAndDrop,
  sendFileAPI,
  fileAPI
} from './utils/abilities'

import {
  Collection,
  UniqCollection,
  CollectionOfPromises
} from './utils/collection'

import { registerMessage, unregisterMessage } from './utils/messages'
import { imageLoader, videoLoader } from './utils/image-loader'
import { log, debug, warn, warnOnce } from './utils/warnings'
import { getPusher } from './utils/pusher'

import {
  unique,
  defer,
  gcd,
  once,
  wrapToPromise,
  then,
  bindAll,
  upperCase,
  publicCallbacks,
  uuid,
  splitUrlRegex,
  uuidRegex,
  groupIdRegex,
  cdnUrlRegex,
  splitCdnUrl,
  escapeRegExp,
  globRegexp,
  normalizeUrl,
  fitText,
  fitSizeInCdnLimit,
  fitSize,
  applyCropCoordsToInfo,
  fileInput,
  fileSelectDialog,
  fileSizeLabels,
  readableFileSize,
  ajaxDefaults,
  jsonp,
  canvasToBlob,
  taskRunner,
  fixedPipe
} from './utils'

import {
  shrinkFile,
  shrinkImage,
  drawFileToCanvas,
  readJpegChunks,
  replaceJpegChunk,
  getExif,
  parseExifOrientation,
  hasTransparency
} from './utils/image-processor'

import { isFile, valueToFile } from './utils/files'
import { isFileGroup, valueToGroup, isFileGroupsEqual } from './utils/groups'

// templates
import { dialog } from './templates/dialog'
import { dialogPanel } from './templates/dialog__panel'
import { progressText } from './templates/progress__text'
import { tabCameraCapture } from './templates/tab-camera-capture'
import { tabCamera } from './templates/tab-camera'
import { tabFle } from './templates/tab-file'
import { tabPreviewError } from './templates/tab-preview-error'
import { tabPreviewImage } from './templates/tab-preview-image'
import { tabPreviewMultipleFile } from './templates/tab-preview-multiple-file'
import { tabPreviewMultiple } from './templates/tab-preview-multiple'
import { tabPreviewRegular } from './templates/tab-preview-regular'
import { tabPreviewUnknown } from './templates/tab-preview-unknown'
import { tabPreviewVideo } from './templates/tab-preview-video'
import { tabUrl } from './templates/tab-url'
import { widgetButton } from './templates/widget-button'
import { widgetFileName } from './templates/widget-file-name'
import { widget } from './templates/widget'

// autogenerated templates
import styles from './templates/styles.jst.ejs'
import icons from './templates/icons.jst.ejs'

import { t } from './locale'

import { version } from '../package.json'

const JST = {
  dialog: dialog,
  dialog__panel: dialogPanel,
  icons: icons,
  progress__text: progressText,
  styles: styles,
  'tab-camera-capture': tabCameraCapture,
  'tab-camera': tabCamera,
  'tab-file': tabFle,
  'tab-preview-error': tabPreviewError,
  'tab-preview-image': tabPreviewImage,
  'tab-preview-multiple-file': tabPreviewMultipleFile,
  'tab-preview-multiple': tabPreviewMultiple,
  'tab-preview-regular': tabPreviewRegular,
  'tab-preview-unknown': tabPreviewUnknown,
  'tab-preview-video': tabPreviewVideo,
  'tab-url': tabUrl,
  'widget-button': widgetButton,
  'widget-file-name': widgetFileName,
  widget: widget
}

const utils = {
  abilities: {
    fileAPI,
    sendFileAPI,
    dragAndDrop,
    canvas,
    fileDragAndDrop,
    iOSVersion,
    Blob,
    URL,
    FileReader
  },

  Collection,
  UniqCollection,
  CollectionOfPromises,

  imageLoader,
  videoLoader,

  log,
  debug,
  warn,
  warnOnce,

  //   commonWarning

  registerMessage,
  unregisterMessage,

  unique,
  defer,
  gcd,
  once,
  wrapToPromise,
  then,
  bindAll,
  upperCase,
  publicCallbacks,
  uuid,
  splitUrlRegex,
  uuidRegex,
  groupIdRegex,
  cdnUrlRegex,
  splitCdnUrl,
  escapeRegExp,
  globRegexp,
  normalizeUrl,
  fitText,
  fitSizeInCdnLimit,
  fitSize,
  applyCropCoordsToInfo,
  fileInput,
  fileSelectDialog,
  fileSizeLabels,
  readableFileSize,
  ajaxDefaults,
  jsonp,
  canvasToBlob,
  taskRunner,
  fixedPipe,

  isFile,
  valueToFile,

  image: {
    shrinkFile,
    shrinkImage,
    drawFileToCanvas,
    readJpegChunks,
    replaceJpegChunk,
    getExif,
    parseExifOrientation,
    hasTransparency
  },

  pusher: {
    getPusher
  },

  isFileGroup,
  valueToGroup,
  isFileGroupsEqual
}

const tpl = (key, ctx = {}) => {
  const fn = JST[key]

  if (fn != null) {
    return fn({
      t,
      utils,
      uploadcare: { version },
      ...ctx
    })
  }

  return ''
}

export { JST, tpl, utils }
